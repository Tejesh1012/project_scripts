import os
spark.conf.set("spark.sql.crossJoin.enabled", "true")
from pyspark.sql.functions import *
from pyspark.sql.functions import lit
from pyspark.sql.types import StructType, StringType, StructField
import sys
sys.path.insert(1, "/appdata/dev/common_components/code")
import subprocess
import json
import os

spark.sql("""set hive.exec.dynamic.partition.mode=nonstrict""")


# Resgistering for Mastered
FACT_CALL = spark.sql("""select * from compute_us_comm_dw.FACT_CALL""")
FACT_CALL.createOrReplaceTempView("FACT_CALL")

DIM_DT = spark.sql("""select * from compute_us_comm_dw.DIM_DT""")
DIM_DT.createOrReplaceTempView("DIM_DT")


MAP_CUST_ALIGT_DRVD = spark.sql("""select * from compute_us_comm_dw.MAP_CUST_ALIGT_DRVD""")
MAP_CUST_ALIGT_DRVD.createOrReplaceTempView("MAP_CUST_ALIGT_DRVD")

CTL_DW_PARAM_VAL = spark.sql("""select * from compute_us_comm_stg.CTL_DW_PARAM_VAL""")
CTL_DW_PARAM_VAL.createOrReplaceTempView("CTL_DW_PARAM_VAL")

MAP_ALIG_FACT_CONFIG = spark.sql("""select * from compute_us_comm_stg.MAP_ALIG_FACT_CONFIG""")
MAP_ALIG_FACT_CONFIG.createOrReplaceTempView("MAP_ALIG_FACT_CONFIG")

DIM_EMP_TERR=spark.sql("""select * from compute_us_comm_dw.DIM_EMP_TERR""")
DIM_EMP_TERR.createOrReplaceTempView("DIM_EMP_TERR")

spark.sql("""select ACNT_CDTL,ACNT_EID,ACNT_ETY_CLAS_CD,ACNT_ETY_CLAS_DESC,ACNT_ETY_CLAS_TYPE_CD,ACNT_ETY_CLAS_TYPE_DESC,ACNT_ETY_SUB_TYPE_CD,ACNT_ETY_SUB_TYPE_DESC,ACNT_ETY_TYPE_CD,ACNT_ETY_TYPE_DESC,ACNT_GEN_FRST_FLG,ACNT_KSR_FLG,ACNT_NM,ACNT_NO_ACCESS_FLG,ACNT_NO_ACCESS_RSN_DESC,ACNT_PLAN,ACNT_PRFR_NM,ACNT_PRI_ADDR_LN1,ACNT_PRI_ADDR_LN2,ACNT_PRI_CITY,ACNT_PRI_EMAIL,ACNT_PRI_FAX_NUM,ACNT_PRI_PHN_NUM,ACNT_PRI_ST_CD,ACNT_PRI_ZIP,ACNT_SK,ACNT_SMPL_STAT,ACNT_STAT,ACNT_STAT_RSN_CD,ACNT_TEACH_FLG,ACT_ID,ACT_TYPE,ADD_DTL,ADD_KEY_MSG,ADDR,ADDR_DEA_STAT,ADDR_LN1,ADDR_LN_2,ALOW_PRD,ASGN_DTM,ASGNR,ASSMCA,ATCHT,ATNDE,ATNDE_ID,ATNDE_LIST,ATNDE_POST_STAT,ATNDE_TYPE,BUS_ACNT,CALL_CMT,CALL_CNT,CALL_CONFLICT_STAT,CALL_DEL,CALL_DT,CALL_DTM,CALL_EXP,CALL_ID,CALL_NM,CALL_OBJV,CALL_TYPE,Call_Type_GILD__c,CDTL,CITNS,CITY,CLM,CMMNLY_REQT_REF,CNFC,COLR,CTAC,CUST_TYPE,DATA_SRC_NM,DAY_TO_SBMT_THE_CALL_GILD,DAY_UNSBMT,DEA,DEA_ADDR,DEA_ADDR_LN_1,DEA_ADDR_LN_2,DEA_CITY,DEA_EXPRN_DT,DEA_ST,DEA_ZIP,DEA_ZIP_4,DEPT_ATNDE,DSB_TO,DSCLMR,DT_SK,DTL,DTL_PRD,DUR,EMP_ID,ERR_REF_CALL,ETY_DISP_NM,ETY_REF_ID,EXCL_FLG,EXCL_RSN,EXP_AMT,EXP_POST_STAT,FOLUP,INCRD_EXP,IS_A_CALL,IS_PRNT_CALL,IS_SMPL_CALL,KEY_MSG,LAST_DEVC,LIC,LIC_EXPRN_DT,LIC_STAT,LOCN,LOCN_SRVC_STAT,MDCL_EVNT,MOBL_CREATED_DTM,MOBL_ID,MOBL_LAST_MODIFIED_DTM,MORE_ACTN,NEXT_CALL_NOTE,NO_DSBT,NUM_OF_ADDL_ATNDE_GILD,NUM_OF_ATNDE,OF_COPIES,OPTL_PURP_1,OPTL_PURP_2,PRE_CALL_NOTE,PRES_ACTV_FLG,PRES_CDTL_CD,PRES_EID,PRES_FULL_NM,PRES_GNDR_CD,PRES_INAC_RSN_CD,PRES_KAISER_FLG,PRES_NO_CTAC_FLG,PRES_PDRP_OPT_OUT_DT,PRES_PDRP_OPT_OUT_FLG,PRES_PRACR_TYPE,PRES_PRI_ADDR_LN_1,PRES_PRI_ADDR_LN_2,PRES_PRI_CITY,PRES_PRI_EMAIL_ID,PRES_PRI_FAX_NUM,PRES_PRI_PHN_NUM,PRES_PRI_SPEC_CD,PRES_PRI_ST_CD,PRES_PRI_ZIP,PRES_SEC_SPEC_CD,PRES_SK,PRES_STAT,PRNT_ADDR,PRNT_CALL,PROD_DCSN,PROD_PRTY_1,PROD_PRTY_2,PROD_PRTY_3,PROD_PRTY_4,PROD_PRTY_5,PRPY,PRSN,REC_TYPE,REQ_RCPT,REQT_BY,SALU,SAV,SAVNEW,SBMT,SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC,SGTR,SGTR_DT,SGTR_LOCN_LAT,SGTR_LOCN_LNGTD,SGTR_PG_IMAG,SHIP_ZIP,SIGNFCNT_EVNT,CASE when substring(terr,1, 2) = '27' or substring(terr,1, 2) = '28'  THEN 'HBVTS' ELSE SLS_FRC_NM END as SLS_FRC_NM,SMPL,SMPL_CARD,SMPL_CARD_RSN,SMPL_SEND_CARD,SRC_VEEVA_ID,SRVY,ST_NM,STAT,STAT_ADV,SUBJ,TERR,TOTL_EXP_ATNDE_CNT,TRGT,USER_ID,VENU,VENU_MS,ZIP,ZIP_4 from fact_call """).registerTempTable("FACT_CALL")

# COMMAND ----------

# DBTITLE 1,Weekly (Non - Mirror)
df=spark.sql("""
Select /*+ BROADCAST(DTM_EXCL),broadcast(STAT_EXCL),broadcast(CONFIG),BROADCAST(MS_EXCL) */
PRES_SK, ACNT_SK, DT.DT_SK,
COALESCE(PRES.TERR_SK,ACNT.TERR_SK) AS TERR_SK,
CALL_DT,
COALESCE(PRES.SLS_FRC_NM,ACNT.SLS_FRC_NM) AS SLS_FRC_NM, 
COALESCE(PRES.ALIGT_TYPE,ACNT.ALIGT_TYPE) AS ALIGT_TYPE,
CUST_TYPE,
UNALIGN_FACT.CALL_ID, PRES_EID,
CASE WHEN PRES.AFLN_ACNT_EID IS NOT NULL THEN PRES.AFLN_ACNT_EID
     WHEN ACNT.AFLN_ACNT_EID IS NOT NULL THEN ACNT.AFLN_ACNT_EID
     ELSE '0' END AS AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC,SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE, CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, COALESCE(PRES.EMP_ID,ACNT.EMP_ID) AS EMP_ID, COALESCE(PRES.TERR_ID,ACNT.TERR_ID) AS TERR_ID, COALESCE(PRES.TERR_NM,ACNT.TERR_NM) AS TERR_NM,
CASE WHEN DTM_EXCL.EXCL_FLG='Y' THEN DTM_EXCL.EXCL_FLG 
	 WHEN STAT_EXCL.EXCL_FLG='Y' THEN STAT_EXCL.EXCL_FLG 
     WHEN MS_EXCL.EXCL_FLG ='Y' THEN MS_EXCL.EXCL_FLG
	 ELSE 'N' END AS EXCL_FLG, 
CASE WHEN DTM_EXCL.EXCL_RSN='CALL DATE NULL' THEN DTM_EXCL.EXCL_RSN
	 WHEN STAT_EXCL.EXCL_RSN='STATUS NOT SUBMITTED' THEN STAT_EXCL.EXCL_RSN
     WHEN MS_EXCL.EXCL_RSN='INTRODUCTORY VISIT WITH MS' THEN MS_EXCL.EXCL_RSN
	 ELSE 'N' END AS EXCL_RSN,
CASE WHEN PRES.EXCL_FLG IS NOT NULL THEN PRES.EXCL_FLG
     WHEN ACNT.EXCL_FLG IS NOT NULL THEN ACNT.EXCL_FLG
     ELSE 'N' END AS ALIGT_EXCL_FLG,
COALESCE(PRES.EXCL_RSN,ACNT.EXCL_RSN) AS ALIGT_EXCL_RSN,DATA_SRC_NM from 
((select * from FACT_CALL where EXCL_FLG <> 'Y' AND TRIM(TERR) NOT LIKE '%A' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) UNALIGN_FACT
LEFT JOIN
(
SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
(SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' AND PTY_TYPE='PRESCRIBER' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')
AND TRIM(TERR_ID) NOT LIKE '%A') MCAD
INNER JOIN
(Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) CONFIG
on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
INNER JOIN
(SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) EMP_TERR
ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) PRES
on UNALIGN_FACT.PRES_EID=PRES.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=PRES.SLS_FRC_NM
LEFT JOIN
(SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
(SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' AND PTY_TYPE='ACCOUNT' AND TRIM(TERR_ID) NOT LIKE '%A' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) MCAD
INNER JOIN
(Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) CONFIG
on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
INNER JOIN
(SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) EMP_TERR
ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) ACNT
on UNALIGN_FACT.ACNT_EID=ACNT.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=ACNT.SLS_FRC_NM
LEFT JOIN( 
SELECT CALL_ID,'Y' AS EXCL_FLG,'CALL DATE NULL' AS EXCL_RSN FROM FACT_CALL where CALL_DTM IS NULL and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')
)DTM_EXCL
ON UNALIGN_FACT.CALL_ID=DTM_EXCL.CALL_ID
LEFT JOIN( 
SELECT CALL_ID,'Y' AS EXCL_FLG,'STATUS NOT SUBMITTED' AS EXCL_RSN FROM FACT_CALL where COALESCE(STAT,'None')<>'Submitted_vod' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')
)STAT_EXCL
ON UNALIGN_FACT.CALL_ID=STAT_EXCL.CALL_ID
LEFT JOIN
( Select CALL_ID, 'Y' AS EXCL_FLG, 'INTRODUCTORY VISIT WITH MS' AS EXCL_RSN FROM FACT_CALL where UPPER(DTL_PRD) LIKE '%INTRO%VISIT%MS%' AND SLS_FRC_NM IN (SELECT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV'))MS_EXCL
ON UNALIGN_FACT.CALL_ID=MS_EXCL.CALL_ID
INNER JOIN
(SELECT CAL_DT,BUS_WK_END_DT,DT_SK FROM DIM_DT) DT
ON UNALIGN_FACT.CALL_DT=DT.CAL_DT)
""")
df.registerTempTable('fact_call_WEEKLY_non_mirror')

spark.sql("""
Select /*+ broadcast(SF_EXCL) */
PRES_SK, ACNT_SK, DT_SK, TERR_SK,
CALL_DT, SLS_FRC_NM, ALIGT_TYPE, CUST_TYPE, UNALIGN_FACT.CALL_ID, PRES_EID, AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC,SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE, CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, EMP_ID, TERR_ID, TERR_NM,
CASE WHEN UNALIGN_FACT.EXCL_FLG='Y' THEN UNALIGN_FACT.EXCL_FLG 
	 WHEN SF_EXCL.EXCL_FLG ='Y' THEN SF_EXCL.EXCL_FLG 
	 ELSE 'N' END AS EXCL_FLG, 
CASE WHEN UNALIGN_FACT.EXCL_RSN <>'N' THEN UNALIGN_FACT.EXCL_RSN
	 WHEN SF_EXCL.EXCL_RSN='SALESFORCE BASED EXCLUSION' THEN SF_EXCL.EXCL_RSN
	 ELSE 'N' END AS EXCL_RSN,
ALIGT_EXCL_FLG, ALIGT_EXCL_RSN, DATA_SRC_NM from
( SELECT * FROM FACT_CALL_WEEKLY_NON_MIRROR) UNALIGN_FACT
LEFT JOIN( 
SELECT CALL_ID,'Y' AS EXCL_FLG,'SALESFORCE BASED EXCLUSION' AS EXCL_RSN FROM (
SELECT PRES_EID,ACNT_EID,CALL_DT,SLS_FRC_NM,CALL_ID,row_number() over (partition by coalesce(PRES_EID,ACNT_EID),CALL_DT,SLS_FRC_NM order by IS_PRNT_CALL ASC ,CALL_DTM DESC, CALL_ID DESC) AS RANK FROM FACT_CALL_WEEKLY_NON_MIRROR WHERE TRIM(TERR) NOT LIKE '%A' and coalesce(EXCL_FLG,'N')='N' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) WHERE RANK>1)SF_EXCL
ON UNALIGN_FACT.CALL_ID=SF_EXCL.CALL_ID
""").registerTempTable('fact_call_WEEKLY_non_mirror_final')

# COMMAND ----------

df=spark.sql("""
Select /*+ BROADCAST(DTM_EXCL),broadcast(STAT_EXCL),BROADCAST(MS_EXCL) */ PRES_SK, ACNT_SK, DT.DT_SK,COALESCE(COALESCE(PRES.TERR_SK,ACNT.TERR_SK),UNASS.TERR_SK) AS TERR_SK, CALL_DT,COALESCE(COALESCE(PRES.SLS_FRC_NM,ACNT.SLS_FRC_NM),UNASS.SLS_FRC_NM) AS SLS_FRC_NM, COALESCE(COALESCE(PRES.ALIGT_TYPE,ACNT.ALIGT_TYPE),UNASS.ALIGT_TYPE) AS ALIGT_TYPE, CUST_TYPE,UNALIGN_FACT.CALL_ID, PRES_EID, 
CASE WHEN PRES.AFLN_ACNT_EID IS NOT NULL THEN PRES.AFLN_ACNT_EID
     WHEN ACNT.AFLN_ACNT_EID IS NOT NULL THEN ACNT.AFLN_ACNT_EID
     ELSE '0' END AS AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC, SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE,CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL, SBMT_DT, SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, COALESCE(PRES.EMP_ID,ACNT.EMP_ID) AS EMP_ID, COALESCE(COALESCE(PRES.TERR_ID,ACNT.TERR_ID),UNASS.TERR_ID) AS TERR_ID, COALESCE(COALESCE(PRES.TERR_NM,ACNT.TERR_NM),UNASS.TERR_NM) AS TERR_NM, CASE WHEN DTM_EXCL.EXCL_FLG='Y' THEN DTM_EXCL.EXCL_FLG 
     WHEN STAT_EXCL.EXCL_FLG='Y' THEN STAT_EXCL.EXCL_FLG 
     WHEN MS_EXCL.EXCL_FLG ='Y' THEN MS_EXCL.EXCL_FLG
     ELSE 'N' END AS EXCL_FLG, 
CASE WHEN DTM_EXCL.EXCL_RSN='CALL DATE NULL' THEN DTM_EXCL.EXCL_RSN
     WHEN STAT_EXCL.EXCL_RSN='STATUS NOT SUBMITTED' THEN STAT_EXCL.EXCL_RSN
     WHEN MS_EXCL.EXCL_RSN='INTRODUCTORY VISIT WITH MS' THEN MS_EXCL.EXCL_RSN
     ELSE 'N' END AS EXCL_RSN,
CASE WHEN PRES.EXCL_FLG IS NOT NULL THEN PRES.EXCL_FLG
     WHEN ACNT.EXCL_FLG IS NOT NULL THEN ACNT.EXCL_FLG
     ELSE 'N'  END AS ALIGT_EXCL_FLG,
COALESCE(PRES.EXCL_RSN,ACNT.EXCL_RSN) AS ALIGT_EXCL_RSN,DATA_SRC_NM from 
((select * from FACT_CALL where EXCL_FLG <> 'Y' AND TRIM(TERR) LIKE '%A' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT' )) UNALIGN_FACT
 
 LEFT JOIN
 (
 SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
 WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
 (SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' AND PTY_TYPE='PRESCRIBER' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT' ) AND TRIM(TERR_ID) LIKE '%A') MCAD
 
 INNER JOIN
 (Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' )) CONFIG
 on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
 
 INNER JOIN
 (SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' )) EMP_TERR
 ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) PRES
 
 on UNALIGN_FACT.PRES_EID=PRES.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=PRES.SLS_FRC_NM
 
 LEFT JOIN
 (
 SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
 WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
 
 (SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT') AND PTY_TYPE='ACCOUNT' AND TRIM(TERR_ID) LIKE '%A') MCAD
 
 INNER JOIN
 (Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) CONFIG
 on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
 
 INNER JOIN
 (SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT') ) EMP_TERR
 ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) ACNT
 
 on UNALIGN_FACT.ACNT_EID=ACNT.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=ACNT.SLS_FRC_NM
 
 LEFT JOIN
(
SELECT EMP_TERR_UNASS.TERR_SK,EMP_TERR_UNASS.TERR_ID,EMP_TERR_UNASS.TERR_NM,EMP_TERR_UNASS.SLS_FRC_NM,(CASE WHEN TRIM(CONFIG.FROZEN_FLG) = 'N' THEN 'DYNAMIC' WHEN TRIM(CONFIG.FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM
(SELECT TERR_SK,TERR_ID,TERR_NM,ALIGT_PERD_NM,SLS_FRC_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' AND UPPER(TERR_NM) LIKE '%UNASSIGN%' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')) EMP_TERR_UNASS
INNER JOIN
(SELECT ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT') ) CONFIG
ON CONFIG.ALIGT_PERD_QRTR=EMP_TERR_UNASS.ALIGT_PERD_NM
AND CONFIG.SLS_FRC_NM=EMP_TERR_UNASS.SLS_FRC_NM)UNASS
ON
UNALIGN_FACT.SLS_FRC_NM=UNASS.SLS_FRC_NM)
LEFT JOIN
( 
 SELECT CALL_ID,'Y' AS EXCL_FLG,'CALL DATE NULL' AS EXCL_RSN FROM FACT_CALL where CALL_DTM IS NULL and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')
 )DTM_EXCL
 ON UNALIGN_FACT.CALL_ID=DTM_EXCL.CALL_ID
 
 LEFT JOIN( 
 SELECT CALL_ID,'Y' AS EXCL_FLG,'STATUS NOT SUBMITTED' AS EXCL_RSN FROM FACT_CALL where COALESCE(STAT,'None')<>'Submitted_vod' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT')
 )STAT_EXCL
 ON UNALIGN_FACT.CALL_ID=STAT_EXCL.CALL_ID

LEFT JOIN
( Select CALL_ID, 'Y' AS EXCL_FLG, 'INTRODUCTORY VISIT WITH MS' AS EXCL_RSN FROM FACT_CALL where UPPER(DTL_PRD) LIKE '%INTRO%VISIT%MS%' AND SLS_FRC_NM IN (SELECT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV'))MS_EXCL
ON UNALIGN_FACT.CALL_ID=MS_EXCL.CALL_ID
 
  
INNER JOIN
 (SELECT CAL_DT,BUS_WK_END_DT,DT_SK FROM DIM_DT) DT
ON UNALIGN_FACT.CALL_DT=DT.CAL_DT 
""")
df.registerTempTable('fact_call_weekly_mirror')

spark.sql("""
Select /*+ broadcast(SF_EXCL) */
PRES_SK, ACNT_SK, DT_SK, TERR_SK,
CALL_DT, SLS_FRC_NM, ALIGT_TYPE, CUST_TYPE, UNALIGN_FACT.CALL_ID, PRES_EID, AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC,SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE, CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, EMP_ID, TERR_ID, TERR_NM,
CASE WHEN UNALIGN_FACT.EXCL_FLG='Y' THEN UNALIGN_FACT.EXCL_FLG 
	 WHEN SF_EXCL.EXCL_FLG ='Y' THEN SF_EXCL.EXCL_FLG 
	 ELSE 'N' END AS EXCL_FLG, 
CASE WHEN UNALIGN_FACT.EXCL_RSN <>'N' THEN UNALIGN_FACT.EXCL_RSN
	 WHEN SF_EXCL.EXCL_RSN='SALESFORCE BASED EXCLUSION' THEN SF_EXCL.EXCL_RSN
	 ELSE 'N' END AS EXCL_RSN,
ALIGT_EXCL_FLG, ALIGT_EXCL_RSN, DATA_SRC_NM from
( SELECT * FROM FACT_CALL_WEEKLY_MIRROR) UNALIGN_FACT
LEFT JOIN( 
 SELECT CALL_ID,'Y' AS EXCL_FLG,'SALESFORCE BASED EXCLUSION' AS EXCL_RSN FROM 
(
 SELECT PRES_EID,ACNT_EID,CALL_DT,SLS_FRC_NM,CALL_ID,row_number() over (partition by coalesce(PRES_EID,ACNT_EID),CALL_DT,SLS_FRC_NM order by IS_PRNT_CALL ASC ,CALL_DTM DESC, CALL_ID DESC) AS RANK FROM FACT_CALL_WEEKLY_MIRROR WHERE  TRIM(TERR) LIKE '%A' and coalesce(EXCL_FLG,'N')='N' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HBV' AND LAYER='ALIGNED_FACT' )) WHERE RANK>1)SF_EXCL
 ON UNALIGN_FACT.CALL_ID=SF_EXCL.CALL_ID
""").registerTempTable('fact_call_WEEKLY_mirror_final')

# COMMAND ----------

compute_query="""insert overwrite table compute_us_comm_hbvdw.FACT_ALIG_CALL_HBV_WK PARTITION(pt_data_dt='$$data_dt',pt_cycle_id='$$cycle_id')
SELECT * FROM fact_call_weekly_mirror_final
UNION
SELECT * FROM fact_call_weekly_non_mirror_final
"""
spark.sql(compute_query)
CommonUtils().copy_hdfs_to_s3("compute_us_comm_hbvdw.FACT_ALIG_CALL_HBV_WK")

=======================================================================================================


import os
spark.conf.set("spark.sql.crossJoin.enabled", "true")
from pyspark.sql.functions import *
from pyspark.sql.functions import lit
from pyspark.sql.types import StructType, StringType, StructField
import sys
sys.path.insert(1, "/appdata/tst/common_components/code")
import subprocess
import json
import os

spark.sql("""set hive.exec.dynamic.partition.mode=nonstrict""")


# Resgistering for Mastered
FACT_CALL = spark.sql("""select * from compute_us_comm_dw.FACT_CALL""")
FACT_CALL.createOrReplaceTempView("FACT_CALL")

DIM_DT = spark.sql("""select * from compute_us_comm_dw.DIM_DT""")
DIM_DT.createOrReplaceTempView("DIM_DT")


MAP_CUST_ALIGT_DRVD = spark.sql("""select * from compute_us_comm_dw.MAP_CUST_ALIGT_DRVD""")
MAP_CUST_ALIGT_DRVD.createOrReplaceTempView("MAP_CUST_ALIGT_DRVD")

CTL_DW_PARAM_VAL = spark.sql("""select * from compute_us_comm_stg.CTL_DW_PARAM_VAL""")
CTL_DW_PARAM_VAL.createOrReplaceTempView("CTL_DW_PARAM_VAL")

MAP_ALIG_FACT_CONFIG = spark.sql("""select * from compute_us_comm_stg.MAP_ALIG_FACT_CONFIG""")
MAP_ALIG_FACT_CONFIG.createOrReplaceTempView("MAP_ALIG_FACT_CONFIG")

DIM_EMP_TERR=spark.sql("""select * from compute_us_comm_dw.DIM_EMP_TERR""")
DIM_EMP_TERR.createOrReplaceTempView("DIM_EMP_TERR")

spark.sql("""select ACNT_CDTL,ACNT_EID,ACNT_ETY_CLAS_CD,ACNT_ETY_CLAS_DESC,ACNT_ETY_CLAS_TYPE_CD,ACNT_ETY_CLAS_TYPE_DESC,ACNT_ETY_SUB_TYPE_CD,ACNT_ETY_SUB_TYPE_DESC,ACNT_ETY_TYPE_CD,ACNT_ETY_TYPE_DESC,ACNT_GEN_FRST_FLG,ACNT_KSR_FLG,ACNT_NM,ACNT_NO_ACCESS_FLG,ACNT_NO_ACCESS_RSN_DESC,ACNT_PLAN,ACNT_PRFR_NM,ACNT_PRI_ADDR_LN1,ACNT_PRI_ADDR_LN2,ACNT_PRI_CITY,ACNT_PRI_EMAIL,ACNT_PRI_FAX_NUM,ACNT_PRI_PHN_NUM,ACNT_PRI_ST_CD,ACNT_PRI_ZIP,ACNT_SK,ACNT_SMPL_STAT,ACNT_STAT,ACNT_STAT_RSN_CD,ACNT_TEACH_FLG,ACT_ID,ACT_TYPE,ADD_DTL,ADD_KEY_MSG,ADDR,ADDR_DEA_STAT,ADDR_LN1,ADDR_LN_2,ALOW_PRD,ASGN_DTM,ASGNR,ASSMCA,ATCHT,ATNDE,ATNDE_ID,ATNDE_LIST,ATNDE_POST_STAT,ATNDE_TYPE,BUS_ACNT,CALL_CMT,CALL_CNT,CALL_CONFLICT_STAT,CALL_DEL,CALL_DT,CALL_DTM,CALL_EXP,CALL_ID,CALL_NM,CALL_OBJV,CALL_TYPE,Call_Type_GILD__c,CDTL,CITNS,CITY,CLM,CMMNLY_REQT_REF,CNFC,COLR,CTAC,CUST_TYPE,DATA_SRC_NM,DAY_TO_SBMT_THE_CALL_GILD,DAY_UNSBMT,DEA,DEA_ADDR,DEA_ADDR_LN_1,DEA_ADDR_LN_2,DEA_CITY,DEA_EXPRN_DT,DEA_ST,DEA_ZIP,DEA_ZIP_4,DEPT_ATNDE,DSB_TO,DSCLMR,DT_SK,DTL,DTL_PRD,DUR,EMP_ID,ERR_REF_CALL,ETY_DISP_NM,ETY_REF_ID,EXCL_FLG,EXCL_RSN,EXP_AMT,EXP_POST_STAT,FOLUP,INCRD_EXP,IS_A_CALL,IS_PRNT_CALL,IS_SMPL_CALL,KEY_MSG,LAST_DEVC,LIC,LIC_EXPRN_DT,LIC_STAT,LOCN,LOCN_SRVC_STAT,MDCL_EVNT,MOBL_CREATED_DTM,MOBL_ID,MOBL_LAST_MODIFIED_DTM,MORE_ACTN,NEXT_CALL_NOTE,NO_DSBT,NUM_OF_ADDL_ATNDE_GILD,NUM_OF_ATNDE,OF_COPIES,OPTL_PURP_1,OPTL_PURP_2,PRE_CALL_NOTE,PRES_ACTV_FLG,PRES_CDTL_CD,PRES_EID,PRES_FULL_NM,PRES_GNDR_CD,PRES_INAC_RSN_CD,PRES_KAISER_FLG,PRES_NO_CTAC_FLG,PRES_PDRP_OPT_OUT_DT,PRES_PDRP_OPT_OUT_FLG,PRES_PRACR_TYPE,PRES_PRI_ADDR_LN_1,PRES_PRI_ADDR_LN_2,PRES_PRI_CITY,PRES_PRI_EMAIL_ID,PRES_PRI_FAX_NUM,PRES_PRI_PHN_NUM,PRES_PRI_SPEC_CD,PRES_PRI_ST_CD,PRES_PRI_ZIP,PRES_SEC_SPEC_CD,PRES_SK,PRES_STAT,PRNT_ADDR,PRNT_CALL,PROD_DCSN,PROD_PRTY_1,PROD_PRTY_2,PROD_PRTY_3,PROD_PRTY_4,PROD_PRTY_5,PRPY,PRSN,REC_TYPE,REQ_RCPT,REQT_BY,SALU,SAV,SAVNEW,SBMT,SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC,SGTR,SGTR_DT,SGTR_LOCN_LAT,SGTR_LOCN_LNGTD,SGTR_PG_IMAG,SHIP_ZIP,SIGNFCNT_EVNT,CASE when substring(terr,1, 1) = '8' and substring(terr,1, 2) != '84' and substring(terr,1, 2) != '85' THEN 'HCVTS' ELSE SLS_FRC_NM END as SLS_FRC_NM,SMPL,SMPL_CARD,SMPL_CARD_RSN,SMPL_SEND_CARD,SRC_VEEVA_ID,SRVY,ST_NM,STAT,STAT_ADV,SUBJ,TERR,TOTL_EXP_ATNDE_CNT,TRGT,USER_ID,VENU,VENU_MS,ZIP,ZIP_4 from fact_call """).registerTempTable("FACT_CALL")


# COMMAND ----------

# DBTITLE 1,Weekly (Non - Mirror)
df=spark.sql("""
Select /*+ BROADCAST(DTM_EXCL),broadcast(STAT_EXCL),broadcast(CONFIG),BROADCAST(MS_EXCL) */
PRES_SK, ACNT_SK, DT.DT_SK,
COALESCE(PRES.TERR_SK,ACNT.TERR_SK) AS TERR_SK,
CALL_DT,
COALESCE(PRES.SLS_FRC_NM,ACNT.SLS_FRC_NM) AS SLS_FRC_NM, 
COALESCE(PRES.ALIGT_TYPE,ACNT.ALIGT_TYPE) AS ALIGT_TYPE,
CUST_TYPE,
UNALIGN_FACT.CALL_ID, PRES_EID,
CASE WHEN PRES.AFLN_ACNT_EID IS NOT NULL THEN PRES.AFLN_ACNT_EID
     WHEN ACNT.AFLN_ACNT_EID IS NOT NULL THEN ACNT.AFLN_ACNT_EID
     ELSE '0' END AS AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC,SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE, CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, COALESCE(PRES.EMP_ID,ACNT.EMP_ID) AS EMP_ID, COALESCE(PRES.TERR_ID,ACNT.TERR_ID) AS TERR_ID, COALESCE(PRES.TERR_NM,ACNT.TERR_NM) AS TERR_NM,
CASE WHEN DTM_EXCL.EXCL_FLG='Y' THEN DTM_EXCL.EXCL_FLG 
	 WHEN STAT_EXCL.EXCL_FLG='Y' THEN STAT_EXCL.EXCL_FLG 
     WHEN MS_EXCL.EXCL_FLG ='Y' THEN MS_EXCL.EXCL_FLG
	 ELSE 'N' END AS EXCL_FLG, 
CASE WHEN DTM_EXCL.EXCL_RSN='CALL DATE NULL' THEN DTM_EXCL.EXCL_RSN
	 WHEN STAT_EXCL.EXCL_RSN='STATUS NOT SUBMITTED' THEN STAT_EXCL.EXCL_RSN
     WHEN MS_EXCL.EXCL_RSN='INTRODUCTORY VISIT WITH MS' THEN MS_EXCL.EXCL_RSN
	 ELSE 'N' END AS EXCL_RSN,
CASE WHEN PRES.EXCL_FLG IS NOT NULL THEN PRES.EXCL_FLG
     WHEN ACNT.EXCL_FLG IS NOT NULL THEN ACNT.EXCL_FLG
     ELSE 'N' END AS ALIGT_EXCL_FLG,
COALESCE(PRES.EXCL_RSN,ACNT.EXCL_RSN) AS ALIGT_EXCL_RSN,DATA_SRC_NM from 
((select * from FACT_CALL where EXCL_FLG <> 'Y' AND TRIM(TERR) NOT LIKE '%A' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) UNALIGN_FACT
LEFT JOIN
(
SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
(SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' AND PTY_TYPE='PRESCRIBER' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')
AND TRIM(TERR_ID) NOT LIKE '%A') MCAD
INNER JOIN
(Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) CONFIG
on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
INNER JOIN
(SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) EMP_TERR
ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) PRES
on UNALIGN_FACT.PRES_EID=PRES.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=PRES.SLS_FRC_NM
LEFT JOIN
(SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
(SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' AND PTY_TYPE='ACCOUNT' AND TRIM(TERR_ID) NOT LIKE '%A' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) MCAD
INNER JOIN
(Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) CONFIG
on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
INNER JOIN
(SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) EMP_TERR
ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) ACNT
on UNALIGN_FACT.ACNT_EID=ACNT.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=ACNT.SLS_FRC_NM
LEFT JOIN( 
SELECT CALL_ID,'Y' AS EXCL_FLG,'CALL DATE NULL' AS EXCL_RSN FROM FACT_CALL where CALL_DTM IS NULL and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')
)DTM_EXCL
ON UNALIGN_FACT.CALL_ID=DTM_EXCL.CALL_ID
LEFT JOIN( 
SELECT CALL_ID,'Y' AS EXCL_FLG,'STATUS NOT SUBMITTED' AS EXCL_RSN FROM FACT_CALL where COALESCE(STAT,'None')<>'Submitted_vod' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')
)STAT_EXCL
ON UNALIGN_FACT.CALL_ID=STAT_EXCL.CALL_ID
LEFT JOIN
( Select CALL_ID, 'Y' AS EXCL_FLG, 'Introductory Visit With MS' AS EXCL_RSN FROM FACT_CALL where UPPER(DTL_PRD) LIKE '%INTRO%VISIT%MS%' AND SLS_FRC_NM IN (SELECT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV'))MS_EXCL
ON UNALIGN_FACT.CALL_ID=MS_EXCL.CALL_ID
INNER JOIN
(SELECT CAL_DT,BUS_WK_END_DT,DT_SK FROM DIM_DT) DT
ON UNALIGN_FACT.CALL_DT=DT.CAL_DT)
""")
df.registerTempTable('fact_call_WEEKLY_non_mirror')


spark.sql("""
Select /*+ broadcast(SF_EXCL) */
PRES_SK, ACNT_SK, DT_SK, TERR_SK,
CALL_DT, SLS_FRC_NM, ALIGT_TYPE, CUST_TYPE, UNALIGN_FACT.CALL_ID, PRES_EID, AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC,SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE, CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, EMP_ID, TERR_ID, TERR_NM,
CASE WHEN UNALIGN_FACT.EXCL_FLG='Y' THEN UNALIGN_FACT.EXCL_FLG 
	 WHEN SF_EXCL.EXCL_FLG ='Y' THEN SF_EXCL.EXCL_FLG 
	 ELSE 'N' END AS EXCL_FLG, 
CASE WHEN UNALIGN_FACT.EXCL_RSN<>'N' THEN UNALIGN_FACT.EXCL_RSN
	 WHEN SF_EXCL.EXCL_RSN='SALESFORCE BASED EXCLUSION' THEN SF_EXCL.EXCL_RSN
	 ELSE 'N' END AS EXCL_RSN,
ALIGT_EXCL_FLG, ALIGT_EXCL_RSN, DATA_SRC_NM from
( SELECT * FROM FACT_CALL_WEEKLY_NON_MIRROR) UNALIGN_FACT
LEFT JOIN( 
SELECT CALL_ID,'Y' AS EXCL_FLG,'SALESFORCE BASED EXCLUSION' AS EXCL_RSN FROM (
SELECT PRES_EID,ACNT_EID,CALL_DT,SLS_FRC_NM,CALL_ID,row_number() over (partition by coalesce(PRES_EID,ACNT_EID),CALL_DT,SLS_FRC_NM order by IS_PRNT_CALL ASC ,cast(CALL_DTM as date) DESC, CALL_ID DESC) AS RANK FROM FACT_CALL_WEEKLY_NON_MIRROR WHERE coalesce(EXCL_FLG,'N')='N' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) WHERE RANK>1 )SF_EXCL
ON UNALIGN_FACT.CALL_ID=SF_EXCL.CALL_ID 
""").registerTempTable('fact_call_WEEKLY_non_mirror_final')

# COMMAND ----------

spark.sql("select * from fact_call_WEEKLY_non_mirror_final where call_id in ('a041H00000sY8LkQAK','a041H00000sY7mBQAS')").show()

# DBTITLE 1,Weekly (Mirror)
df=spark.sql("""
Select /*+ BROADCAST(DTM_EXCL),broadcast(STAT_EXCL),BROADCAST(MS_EXCL) */ PRES_SK, ACNT_SK, DT.DT_SK,COALESCE(COALESCE(PRES.TERR_SK,ACNT.TERR_SK),UNASS.TERR_SK) AS TERR_SK, CALL_DT,COALESCE(COALESCE(PRES.SLS_FRC_NM,ACNT.SLS_FRC_NM),UNASS.SLS_FRC_NM) AS SLS_FRC_NM, COALESCE(COALESCE(PRES.ALIGT_TYPE,ACNT.ALIGT_TYPE),UNASS.ALIGT_TYPE) AS ALIGT_TYPE, CUST_TYPE,UNALIGN_FACT.CALL_ID, PRES_EID, 
CASE WHEN PRES.AFLN_ACNT_EID IS NOT NULL THEN PRES.AFLN_ACNT_EID
     WHEN ACNT.AFLN_ACNT_EID IS NOT NULL THEN ACNT.AFLN_ACNT_EID
     ELSE '0' END AS AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC, SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE,CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL, SBMT_DT, SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, COALESCE(PRES.EMP_ID,ACNT.EMP_ID) AS EMP_ID, COALESCE(COALESCE(PRES.TERR_ID,ACNT.TERR_ID),UNASS.TERR_ID) AS TERR_ID, COALESCE(COALESCE(PRES.TERR_NM,ACNT.TERR_NM),UNASS.TERR_NM) AS TERR_NM, CASE WHEN DTM_EXCL.EXCL_FLG='Y' THEN DTM_EXCL.EXCL_FLG 
     WHEN STAT_EXCL.EXCL_FLG='Y' THEN STAT_EXCL.EXCL_FLG 
     WHEN MS_EXCL.EXCL_FLG ='Y' THEN MS_EXCL.EXCL_FLG
     ELSE 'N' END AS EXCL_FLG, 
CASE WHEN DTM_EXCL.EXCL_RSN='CALL DATE NULL' THEN DTM_EXCL.EXCL_RSN
     WHEN STAT_EXCL.EXCL_RSN='STATUS NOT SUBMITTED' THEN STAT_EXCL.EXCL_RSN
     WHEN MS_EXCL.EXCL_RSN='INTRODUCTORY VISIT WITH MS' THEN MS_EXCL.EXCL_RSN
     ELSE 'N' END AS EXCL_RSN,
CASE WHEN PRES.EXCL_FLG IS NOT NULL THEN PRES.EXCL_FLG
     WHEN ACNT.EXCL_FLG IS NOT NULL THEN ACNT.EXCL_FLG
     ELSE 'N'  END AS ALIGT_EXCL_FLG,
COALESCE(PRES.EXCL_RSN,ACNT.EXCL_RSN) AS ALIGT_EXCL_RSN,DATA_SRC_NM from 
((select * from FACT_CALL where EXCL_FLG <> 'Y' AND TRIM(TERR) LIKE '%A' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT' )) UNALIGN_FACT
 
 LEFT JOIN
 (
 SELECT EMP_TERR.EMP_ID,MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
 WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
 (SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' AND PTY_TYPE='PRESCRIBER' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT' ) AND TRIM(TERR_ID) LIKE '%A') MCAD
 
 INNER JOIN
 (Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' )) CONFIG
 on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
 
 INNER JOIN
 (SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' )) EMP_TERR
 ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) PRES
 
 on UNALIGN_FACT.PRES_EID=PRES.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=PRES.SLS_FRC_NM
 
 LEFT JOIN
 (
 SELECT EMP_TERR.EMP_ID, MCAD.TERR_ID,MCAD.TERR_NM,MCAD.SLS_FRC_NM,MCAD.EXCL_RSN,MCAD.EXCL_FLG,MCAD.FNL_EID,TERR_SK,MCAD.ACNT_EID AS AFLN_ACNT_EID,(CASE WHEN TRIM(IS_FROZEN_FLG) = 'N' THEN 'DYNAMIC' 
 WHEN TRIM(IS_FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM 
 
 (SELECT TERR_ID,TERR_NM,SLS_FRC_NM,EXCL_FLG,EXCL_RSN,ALIGT_TYPE,FNL_EID,ALIGT_PERD_QTR,IS_FROZEN_FLG,ACNT_EID from MAP_CUST_ALIGT_DRVD where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT') AND PTY_TYPE='ACCOUNT' AND TRIM(TERR_ID) LIKE '%A') MCAD
 
 INNER JOIN
 (Select ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) CONFIG
 on MCAD.SLS_FRC_NM=CONFIG.SLS_FRC_NM AND MCAD.ALIGT_PERD_QTR=CONFIG.ALIGT_PERD_QRTR and CONFIG.FROZEN_FLG=MCAD.IS_FROZEN_FLG
 
 INNER JOIN
 (SELECT EMP_ID,TERR_SK,TERR_ID,ALIGT_PERD_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT') ) EMP_TERR
 ON EMP_TERR.TERR_ID=MCAD.TERR_ID and CONFIG.ALIGT_PERD_QRTR=EMP_TERR.ALIGT_PERD_NM) ACNT
 
 on UNALIGN_FACT.ACNT_EID=ACNT.FNL_EID and UNALIGN_FACT.SLS_FRC_NM=ACNT.SLS_FRC_NM
 
 LEFT JOIN
(
SELECT EMP_TERR_UNASS.TERR_SK,EMP_TERR_UNASS.TERR_ID,EMP_TERR_UNASS.TERR_NM,EMP_TERR_UNASS.SLS_FRC_NM,(CASE WHEN TRIM(CONFIG.FROZEN_FLG) = 'N' THEN 'DYNAMIC' WHEN TRIM(CONFIG.FROZEN_FLG) = 'Y' THEN 'FROZEN' END) AS ALIGT_TYPE FROM
(SELECT TERR_SK,TERR_ID,TERR_NM,ALIGT_PERD_NM,SLS_FRC_NM FROM DIM_EMP_TERR where EDW_ACTV_FLG='Y' AND UPPER(TERR_NM) LIKE '%UNASSIGN%' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')) EMP_TERR_UNASS
INNER JOIN
(SELECT ALIGT_PERD_QRTR,SLS_FRC_NM,FROZEN_FLG from MAP_ALIG_FACT_CONFIG where frequency='WEEKLY' and data_src='Veeva' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT') ) CONFIG
ON CONFIG.ALIGT_PERD_QRTR=EMP_TERR_UNASS.ALIGT_PERD_NM
AND CONFIG.SLS_FRC_NM=EMP_TERR_UNASS.SLS_FRC_NM)UNASS
ON
UNALIGN_FACT.SLS_FRC_NM=UNASS.SLS_FRC_NM)
LEFT JOIN
( 
 SELECT CALL_ID,'Y' AS EXCL_FLG,'CALL DATE NULL' AS EXCL_RSN FROM FACT_CALL where CALL_DTM IS NULL and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')
 )DTM_EXCL
 ON UNALIGN_FACT.CALL_ID=DTM_EXCL.CALL_ID
 
 LEFT JOIN( 
 SELECT CALL_ID,'Y' AS EXCL_FLG,'STATUS NOT SUBMITTED' AS EXCL_RSN FROM FACT_CALL where COALESCE(STAT,'None')<>'Submitted_vod' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' AND LAYER='ALIGNED_FACT')
 )STAT_EXCL
 ON UNALIGN_FACT.CALL_ID=STAT_EXCL.CALL_ID
 
LEFT JOIN
( Select CALL_ID, 'Y' AS EXCL_FLG, 'Introductory Visit With MS' AS EXCL_RSN FROM FACT_CALL where UPPER(DTL_PRD) LIKE '%INTRO%VISIT%MS%' AND SLS_FRC_NM IN (SELECT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV'))MS_EXCL
ON UNALIGN_FACT.CALL_ID=MS_EXCL.CALL_ID
 
  
INNER JOIN
 (SELECT CAL_DT,BUS_WK_END_DT,DT_SK FROM DIM_DT) DT
ON UNALIGN_FACT.CALL_DT=DT.CAL_DT 
""")
df.registerTempTable('fact_call_weekly_mirror')

spark.sql("""
Select /*+ broadcast(SF_EXCL) */
PRES_SK, ACNT_SK, DT_SK, TERR_SK,
CALL_DT, SLS_FRC_NM, ALIGT_TYPE, CUST_TYPE, UNALIGN_FACT.CALL_ID, PRES_EID, AFLN_ACNT_EID,
PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, ACNT_EID, ACNT_NM, ACNT_ETY_CLAS_CD, ACNT_ETY_CLAS_DESC, ACNT_ETY_CLAS_TYPE_CD, ACNT_ETY_CLAS_TYPE_DESC, ACNT_ETY_TYPE_CD, ACNT_ETY_TYPE_DESC, ACNT_ETY_SUB_TYPE_CD, ACNT_ETY_SUB_TYPE_DESC, ACNT_PRI_PHN_NUM, ACNT_PRI_FAX_NUM, ACNT_PRI_EMAIL, ACNT_STAT, ACNT_STAT_RSN_CD, ACNT_PRI_ADDR_LN1, ACNT_PRI_ADDR_LN2, ACNT_PRI_CITY, ACNT_PRI_ST_CD, ACNT_PRI_ZIP, ACNT_GEN_FRST_FLG, ACNT_KSR_FLG, ACNT_TEACH_FLG, ACNT_NO_ACCESS_FLG, ACNT_NO_ACCESS_RSN_DESC,SRC_VEEVA_ID, ACNT_PLAN, ACT_ID, ACT_TYPE, ADDR_LN1, ADDR_LN_2, ADDR, ADD_DTL, ADD_KEY_MSG, ALOW_PRD, ASGNR, ASGN_DTM, ASSMCA, ATNDE, ATNDE_LIST, ATNDE_POST_STAT, ATNDE_TYPE, CALL_CMT, CALL_CNT, CALL_TYPE, CALL_TYPE_GILD__C, CITNS, CITY, CLM, COLR, CMMNLY_REQT_REF, CNFC, CTAC, CDTL, DAY_TO_SBMT_THE_CALL_GILD, DAY_UNSBMT, DEA_ADDR_LN_1, DEA_ADDR_LN_2, DEA_ADDR, DEA_CITY, DEA_EXPRN_DT, DEA_ST, DEA, DEA_ZIP_4, DEA_ZIP, DEPT_ATNDE, DTL_PRD, DSB_TO, DSCLMR, DUR, ETY_DISP_NM, ETY_REF_ID, ERR_REF_CALL, EXP_AMT, EXP_POST_STAT, INCRD_EXP, IS_A_CALL, IS_PRNT_CALL, IS_SMPL_CALL, LAST_DEVC, LIC_EXPRN_DT, LIC_STAT, LIC, LOCN_SRVC_STAT, LOCN, MDCL_EVNT, MOBL_CREATED_DTM, MOBL_ID, MOBL_LAST_MODIFIED_DTM, CALL_NM, NEXT_CALL_NOTE, NO_DSBT, NUM_OF_ADDL_ATNDE_GILD, NUM_OF_ATNDE, OF_COPIES, OPTL_PURP_1, OPTL_PURP_2, PRNT_ADDR, PRNT_CALL, PRSN, PRE_CALL_NOTE, PROD_PRTY_1, PROD_PRTY_2, PROD_PRTY_3, PROD_PRTY_4, PROD_PRTY_5, PRPY, REC_TYPE, REQT_BY, REQ_RCPT, SALU, SMPL_CARD_RSN, SMPL_CARD, SMPL_SEND_CARD, SHIP_ZIP, SGTR_DT, SGTR_LOCN_LAT, SGTR_LOCN_LNGTD, SGTR_PG_IMAG, SGTR, SIGNFCNT_EVNT, ST_NM, STAT_ADV, STAT, SUBJ, SBMT_BY_MOBL,SBMT_DT,SBMT_FOR_CPRYT_CLERC, TRGT, TERR, TOTL_EXP_ATNDE_CNT, USER_ID, VENU, VENU_MS, ZIP_4, ZIP, ACNT_CDTL, ACNT_PRFR_NM, ACNT_SMPL_STAT, ADDR_DEA_STAT, ATCHT, ATNDE_ID, BUS_ACNT, CALL_CONFLICT_STAT, CALL_OBJV, CALL_DEL, DTL, CALL_EXP, FOLUP, KEY_MSG, MORE_ACTN, PROD_DCSN, SMPL, SAVNEW, SAV, SBMT, SRVY, CALL_DTM, EMP_ID, TERR_ID, TERR_NM,
CASE WHEN UNALIGN_FACT.EXCL_FLG='Y' THEN UNALIGN_FACT.EXCL_FLG 
	 WHEN SF_EXCL.EXCL_FLG ='Y' THEN SF_EXCL.EXCL_FLG 
	 ELSE 'N' END AS EXCL_FLG, 
CASE WHEN UNALIGN_FACT.EXCL_RSN<>'N' THEN UNALIGN_FACT.EXCL_RSN
	 WHEN SF_EXCL.EXCL_RSN='SALESFORCE BASED EXCLUSION' THEN SF_EXCL.EXCL_RSN
	 ELSE 'N' END AS EXCL_RSN,
ALIGT_EXCL_FLG, ALIGT_EXCL_RSN, DATA_SRC_NM from
( SELECT * FROM FACT_CALL_WEEKLY_MIRROR) UNALIGN_FACT
LEFT JOIN( 
 SELECT CALL_ID,'Y' AS EXCL_FLG,'SALESFORCE BASED EXCLUSION' AS EXCL_RSN FROM 
(
 SELECT PRES_EID,ACNT_EID,CALL_DT,SLS_FRC_NM,CALL_ID,row_number() over (partition by coalesce(PRES_EID,ACNT_EID),CALL_DT,SLS_FRC_NM order by IS_PRNT_CALL ASC ,cast(CALL_DTM as date) DESC, CALL_ID DESC) AS RANK FROM FACT_CALL_WEEKLY_MIRROR WHERE coalesce(EXCL_FLG,'N')='N' and sls_frc_nm in (SELECT DISTINCT SLS_FRC_NM FROM CTL_DW_PARAM_VAL WHERE PARM_NM='MKT_NM' AND MKT_NM='HCV' )) WHERE RANK>1)SF_EXCL
 ON UNALIGN_FACT.CALL_ID=SF_EXCL.CALL_ID
""").registerTempTable('fact_call_WEEKLY_mirror_final')

# COMMAND ----------

compute_query="""insert overwrite table compute_us_comm_hcvdw.FACT_ALIG_CALL_HCV_WK PARTITION(pt_data_dt='$$data_dt',pt_cycle_id='$$cycle_id')
SELECT * FROM fact_call_weekly_mirror_final
UNION
SELECT * FROM fact_call_weekly_non_mirror_final
"""
spark.sql(compute_query)
CommonUtils().copy_hdfs_to_s3("compute_us_comm_hcvdw.FACT_ALIG_CALL_HCV_WK")




=======================================================================================================

# Databricks notebook source
import os
from pyspark.sql.functions import *
from pyspark.sql.functions import lit
from pyspark.sql.types import StructType, StringType, StructField
import sys
sys.path.insert(1, "/appdata/tst/common_components/code")
import subprocess
import json
import os

spark.sql("""set hive.exec.dynamic.partition.mode=nonstrict""")

FACT_MX_CLAM_HIV = spark.sql("""select * from compute_us_comm_hivdw.FACT_MX_CLAM_HIV""")
FACT_MX_CLAM_HIV.createOrReplaceTempView("FACT_MX_CLAM_HIV")

MAP_CUST_ALIGT_DRVD = spark.sql("""select * from compute_us_comm_dw.MAP_CUST_ALIGT_DRVD""")
MAP_CUST_ALIGT_DRVD.createOrReplaceTempView("MAP_CUST_ALIGT_DRVD")

MAP_ALIG_FACT_CONFIG = spark.sql("""select * from compute_us_comm_stg.MAP_ALIG_FACT_CONFIG""")
MAP_ALIG_FACT_CONFIG.createOrReplaceTempView("MAP_ALIG_FACT_CONFIG")

DIM_EMP_TERR = spark.sql("""select * from compute_us_comm_dw.DIM_EMP_TERR""")
DIM_EMP_TERR.createOrReplaceTempView("DIM_EMP_TERR")

DIM_DT = spark.sql("""select * from compute_us_comm_stg.DIM_DT""")
DIM_DT.createOrReplaceTempView("DIM_DT")

STG_SAO_SLS_EXCL = spark.sql("""select * from compute_us_comm_stg.STG_SAO_SLS_EXCL""")
STG_SAO_SLS_EXCL.createOrReplaceTempView("STG_SAO_SLS_EXCL")



# COMMAND ----------

df_align = spark.sql("""
SELECT mcad.MKT_NM, mcad.PTY_EID, mcad.SVR_PTY_EID, mcad.FNL_EID, mcad.ACNT_EID, mcad.TERR_ID, mcad.TERR_NM, mcad.SLS_FRC_NM, mcad.ZIP, mcad.ADDR_ID, 
CASE WHEN mcad.IS_FROZEN_FLG = 'Y' THEN 'FROZEN' ELSE 'DYNAMIC' END AS ALIGT_TYPE, mcad.ALIGT_SPLT_PCT, mcad.ALIGT_PERD_QTR, mcad.EXCL_FLG, mcad.EXCL_RSN, mafc.DATA_SRC, det.TERR_SK 
FROM (SELECT * FROM MAP_CUST_ALIGT_DRVD WHERE EDW_ACTV_FLG = 'Y' AND UPPER(PTY_TYPE) = 'PRESCRIBER' )mcad
INNER JOIN 
(SELECT DATA_SRC, ALIGT_PERD_QRTR, FROZEN_FLG, FREQUENCY, SLS_FRC_NM FROM MAP_ALIG_FACT_CONFIG WHERE UPPER(DATA_SRC) IN (SELECT DISTINCT UPPER(DATA_SRC_NM) FROM FACT_MX_CLAM_HIV)  AND UPPER(FREQUENCY) = 'WEEKLY' )mafc
ON mcad.ALIGT_PERD_QTR=mafc.ALIGT_PERD_QRTR AND mcad.SLS_FRC_NM=mafc.SLS_FRC_NM AND mcad.IS_FROZEN_FLG=mafc.FROZEN_FLG
LEFT JOIN 
(SELECT TERR_SK, TERR_ID, TERR_NM, ALIGT_PERD_NM, SLS_FRC_NM FROM DIM_EMP_TERR WHERE EDW_ACTV_FLG = 'Y')det
ON mcad.TERR_ID=det.TERR_ID AND mcad.ALIGT_PERD_QTR=det.ALIGT_PERD_NM and mcad.SLS_FRC_NM=det.SLS_FRC_NM""")
df_align.registerTempTable('WT_ALIGN_PRES')

# COMMAND ----------

df_align = spark.sql("""
SELECT mcad.MKT_NM, mcad.PTY_EID, mcad.SVR_PTY_EID, mcad.FNL_EID, mcad.ACNT_EID, mcad.TERR_ID, mcad.TERR_NM, mcad.SLS_FRC_NM, mcad.ZIP, mcad.ADDR_ID, 
CASE WHEN mcad.IS_FROZEN_FLG = 'Y' THEN 'FROZEN' ELSE 'DYNAMIC' END AS ALIGT_TYPE, mcad.ALIGT_SPLT_PCT, mcad.ALIGT_PERD_QTR, mcad.EXCL_FLG, mcad.EXCL_RSN, mafc.DATA_SRC, det.TERR_SK 
FROM (SELECT * FROM MAP_CUST_ALIGT_DRVD WHERE EDW_ACTV_FLG = 'Y' AND UPPER(PTY_TYPE) = 'ACCOUNT')mcad
INNER JOIN 
(SELECT DATA_SRC, ALIGT_PERD_QRTR, FROZEN_FLG, FREQUENCY, SLS_FRC_NM FROM MAP_ALIG_FACT_CONFIG WHERE UPPER(DATA_SRC) IN (SELECT DISTINCT UPPER(DATA_SRC_NM) FROM FACT_MX_CLAM_HIV)  AND UPPER(FREQUENCY) = 'WEEKLY' )mafc
ON mcad.ALIGT_PERD_QTR=mafc.ALIGT_PERD_QRTR AND mcad.SLS_FRC_NM=mafc.SLS_FRC_NM AND mcad.IS_FROZEN_FLG=mafc.FROZEN_FLG
LEFT JOIN 
(SELECT TERR_SK, TERR_ID, TERR_NM, ALIGT_PERD_NM, SLS_FRC_NM FROM DIM_EMP_TERR WHERE EDW_ACTV_FLG = 'Y' )det
ON mcad.TERR_ID=det.TERR_ID AND mcad.ALIGT_PERD_QTR=det.ALIGT_PERD_NM and mcad.SLS_FRC_NM=det.SLS_FRC_NM""")
df_align.registerTempTable('WT_ALIGN_ACNT')

# COMMAND ----------

df_align_acnt = spark.sql("""SELECT A.* FROM
(SELECT * FROM WT_ALIGN_ACNT)A
INNER JOIN
(SELECT DISTINCT ACNT_EID,DATA_SRC_NM FROM FACT_MX_CLAM_HIV )B
ON TRIM(A.FNL_EID) = TRIM(B.ACNT_EID)""")
df_align_acnt.registerTempTable('WT_ALIGN_ACNT_FN')

# COMMAND ----------

df_align_pres = spark.sql("""SELECT A.* FROM
(SELECT * FROM WT_ALIGN_PRES)A
INNER JOIN
(SELECT DISTINCT PRES_EID,DATA_SRC_NM FROM FACT_MX_CLAM_HIV )B
ON TRIM(A.FNL_EID) = TRIM(B.PRES_EID)""")
df_align_pres.registerTempTable('WT_ALIGN_PRES_FN')

# COMMAND ----------

df_test = spark.sql("""SELECT 
/*+ BROADCAST(WT_ALIGN_PRES_FN),BROADCAST(WT_ALIGN_ACNT_FN) */
MX.*,
COALESCE(WT_ALIGN_PRES.TERR_SK,WT_ALIGN_ACNT.TERR_SK) AS TERR_SK,
COALESCE(WT_ALIGN_PRES.TERR_ID,WT_ALIGN_ACNT.TERR_ID) AS TERR_ID,
COALESCE(WT_ALIGN_PRES.TERR_NM,WT_ALIGN_ACNT.TERR_NM) AS TERR_NM,
COALESCE(WT_ALIGN_PRES.SLS_FRC_NM,WT_ALIGN_ACNT.SLS_FRC_NM) AS SLS_FRC_NM,
COALESCE(WT_ALIGN_PRES.ZIP,WT_ALIGN_ACNT.ZIP) AS ZIP,
COALESCE(WT_ALIGN_PRES.ADDR_ID,WT_ALIGN_ACNT.ADDR_ID) AS ADDR_ID,
COALESCE(WT_ALIGN_PRES.ALIGT_TYPE,WT_ALIGN_ACNT.ALIGT_TYPE) AS ALIGT_TYPE,
COALESCE(WT_ALIGN_PRES.ALIGT_SPLT_PCT,WT_ALIGN_ACNT.ALIGT_SPLT_PCT) AS ALIGT_SPLT_PCT,
COALESCE(WT_ALIGN_PRES.ALIGT_PERD_QTR,WT_ALIGN_ACNT.ALIGT_PERD_QTR) AS ALIGT_PERD_QTR,
COALESCE(WT_ALIGN_PRES.EXCL_FLG,WT_ALIGN_ACNT.EXCL_FLG) AS ALIGT_EXCL_FLG,
COALESCE(WT_ALIGN_PRES.EXCL_RSN,WT_ALIGN_ACNT.EXCL_RSN) AS ALIGT_EXCL_RSN,
dt.BUS_WK_END_DT AS WK_END_DT, 
excl.PROD_EXCL_FLG,
excl.PROD_EXCL_RSN
FROM
(SELECT *,concat_ws(' ',BRD_NM,MHSM_OF_ACTN) AS EXCL_KEY FROM FACT_MX_CLAM_HIV)MX
LEFT JOIN
WT_ALIGN_PRES_FN WT_ALIGN_PRES
ON UPPER(MX.DATA_SRC_NM)=UPPER(WT_ALIGN_PRES.DATA_SRC) AND MX.PRES_EID = WT_ALIGN_PRES.FNL_EID
LEFT JOIN
WT_ALIGN_ACNT_FN WT_ALIGN_ACNT
ON UPPER(MX.DATA_SRC_NM)=UPPER(WT_ALIGN_ACNT.DATA_SRC) AND MX.ACNT_EID = WT_ALIGN_ACNT.FNL_EID
LEFT JOIN 
(SELECT DISTINCT DT_SK, DT_NK, CAL_DT, CAL_DAY_OF_WK, CAL_WK_NUM, CAL_DAY_OF_MTH, CAL_DAY_OF_YR, CAL_MTH_NUM, CAL_MTH_NM, CAL_WK_STRT_DT, CAL_WK_END_DT, CAL_MTH_STRT_DT, CAL_MTH_END_DT, BUS_WK_STRT_DT, BUS_WK_END_DT, BUS_MTH_STRT_DT, BUS_MTH_END_DT FROM DIM_DT)dt
ON MX.DT_SK=dt.DT_SK

LEFT JOIN 
(SELECT ETY_ID, DATA_SRC_NM, EXCL_RSN AS PROD_EXCL_RSN, 'Y' AS PROD_EXCL_FLG FROM STG_SAO_SLS_EXCL WHERE UPPER(EXCL_RSN_TYP)='PRODUCT' AND UPPER(SLS_FRC_NM) LIKE 'INF%')excl
ON UPPER(MX.DATA_SRC_NM)=UPPER(excl.DATA_SRC_NM) AND UPPER(MX.EXCL_KEY)=UPPER(excl.ETY_ID)""")
df_test.registerTempTable('FACT_ALIG_MX_CLAM')


# COMMAND ----------

df_final = spark.sql("""SELECT MKT_NM, ACNT_SK, PRES_SK, PLAN_SK, PROD_SK, B.DT_SK, CLAM_ID, ACNT_EID AS AFLN_ACNT_EID, REF_PRES_EID, PRES_EID, PRES_FULL_NM, PRES_PRACR_TYPE, PRES_GNDR_CD, PRES_CDTL_CD, PRES_ACTV_FLG, PRES_PRI_SPEC_CD, PRES_SEC_SPEC_CD, PRES_PDRP_OPT_OUT_FLG, PRES_PDRP_OPT_OUT_DT, PRES_STAT, PRES_INAC_RSN_CD, PRES_PRI_PHN_NUM, PRES_PRI_FAX_NUM, PRES_PRI_EMAIL_ID, PRES_PRI_ADDR_LN_1, PRES_PRI_ADDR_LN_2, PRES_PRI_CITY, PRES_PRI_ST_CD, PRES_PRI_ZIP, PRES_KAISER_FLG, PRES_NO_CTAC_FLG, PLAN_EID, PLAN_ID, PLAN_NM, PAYER_EID, PYR_ID, PYR_NM, PBM_EID, PBM_ID, PBM_NM, BOB_EID, BOB_ID, BOB_NM, PLAN_PMT_TYPE, PLAN_TYPE_CD, PLAN_TYPE_DESC, PLAN_SUB_TYPE_CD, PLAN_SUB_TYPE_DESC, GNER_PROD_FLG, GNER_NM, PTNT_ID, SVC_DT, MX_SVC_NM, MX_CD_VER, DX_CD, DX_CD_DESC, DX_CD_VER, PX_CD, PX_CD_DESC, PX_CD_VER, SRC_NDC_CD, UNIT_ADM, CLAM_SRC, PLAC_OF_SVC_CD, PLAC_OF_SVC_NM, PLAC_OF_SVC_DESC, FAC_TYPE_CD, FCLTY_TYPE_DESC, REF_PRES_ID, SRC_PRES_TYPE, SRC_PRES_ID, SRC_PRES_SPEC_CD, SRC_PRES_SPEC_DESC, SRC_FNAME, SRC_LNAME, SRC_ORG_NM, SRC_ADDR, SRC_CITY, SRC_ST_CD, SRC_ZIP, SRC_PHN_NUM, SRC_PRES_DEA_NUM, SRC_PRES_ME_NUM, SRC_PRES_NPI_NUM, SRC_PLAN_ID, SRC_PYR_NM, SRC_PLAN_NM, SRC_PBM_NM, SRC_MTHD_OF_PMT, SRC_MODEL_TYPE, DATA_SRC_NM, EXCL_KEY, TERR_SK, TERR_ID, TERR_NM, SLS_FRC_NM, ZIP, ADDR_ID, ALIGT_TYPE, ALIGT_SPLT_PCT, ALIGT_PERD_QTR, ALIGT_EXCL_FLG, ALIGT_EXCL_RSN, WK_END_DT AS WK_DT, PROD_EXCL_FLG, PROD_EXCL_RSN FROM FACT_ALIG_MX_CLAM A 
LEFT JOIN 
(SELECT DISTINCT DT_SK, DT_NK, CAL_DT, CAL_DAY_OF_WK, CAL_WK_NUM, CAL_DAY_OF_MTH, CAL_DAY_OF_YR, CAL_MTH_NUM, CAL_MTH_NM, CAL_WK_STRT_DT, CAL_WK_END_DT, CAL_MTH_STRT_DT, CAL_MTH_END_DT, BUS_WK_STRT_DT, BUS_WK_END_DT, BUS_MTH_STRT_DT, BUS_MTH_END_DT FROM DIM_DT)B 
ON A.WK_END_DT=B.CAL_DT""")
df_final.registerTempTable('FACT_ALIG_MX_CLAM_WK')

# COMMAND ----------

# MAGIC %sql
# MAGIC INSERT OVERWRITE LOCAL DIRECTORY '/mnt/dev-inflam-compute/aditya/FACT_ALIG_MX_CLAM_WK/'
# MAGIC SELECT * FROM FACT_ALIG_MX_CLAM_WK 

# COMMAND ----------

df_final.write.format("delta").mode("overwrite").save("/mnt/dev-inflam-compute/aditya/FACT_ALIG_MX_CLAM_WK/")

# COMMAND ----------

# MAGIC %sql
# MAGIC DROP TABLE compute_inflamdm.FACT_ALIG_MX_CLAM_WK

# COMMAND ----------

# MAGIC %sql
# MAGIC CREATE TABLE compute_inflamdm.FACT_ALIG_MX_CLAM_WK PARTITION (pt_data_dt='${data_date}',pt_cycle_id='${cycle_id}')
# MAGIC   USING DELTA
# MAGIC   LOCATION '/mnt/dev-inflam-compute/aditya/FACT_ALIG_MX_CLAM_WK/'

# COMMAND ----------

compute_query = """ Insert overwrite table compute_us_comm_hivdw.FACT_ALIG_MX_CLAM_WK PARTITION(pt_data_dt='$$data_dt',pt_cycle_id='$$cycle_id')
SELECT * FROM FACT_ALIG_MX_CLAM_WK"""

spark.sql(compute_query)

CommonUtils().copy_hdfs_to_s3("compute_us_comm_hivdw.FACT_ALIG_MX_CLAM_WK")





====================================================================================================================


import os
spark.conf.set("spark.sql.crossJoin.enabled", "true")
from pyspark.sql.functions import *
from pyspark.sql.functions import lit
from pyspark.sql.types import StructType, StringType, StructField
import sys
sys.path.insert(1, "/appdata/dev/common_components/code")
import subprocess
import json
import os

spark.conf.set("spark.sql.crossJoin.enabled", True)


CTL_DW_PARAM_VAL = spark.sql("""select * from compute_us_comm_stg.CTL_DW_PARAM_VAL""")
CTL_DW_PARAM_VAL.createOrReplaceTempView("CTL_DW_PARAM_VAL")


FACT_ALIG_NBRX_CORE_HIV_WK=spark.sql("""Select * from compute_us_comm_hivdw.FACT_ALIG_NBRX_CORE_HIV_WK""")
FACT_ALIG_NBRX_CORE_HIV_WK.createOrReplaceTempView('FACT_ALIG_NBRX_CORE_HIV_WK')

DIM_EMP_TERR=spark.sql("""Select * from compute_us_comm_dw.DIM_EMP_TERR""")
DIM_EMP_TERR.createOrReplaceTempView('DIM_EMP_TERR')


FACT_ALIG_NBRX_SOB_HIV_WK=spark.sql("""Select * from compute_us_comm_hivdw.FACT_ALIG_NBRX_SOB_HIV_WK""")
FACT_ALIG_NBRX_SOB_HIV_WK.createOrReplaceTempView('FACT_ALIG_NBRX_SOB_HIV_WK')

MAP_TIME_BCKT=spark.sql("""Select * from compute_us_comm_dw.MAP_TIME_BCKT""")
MAP_TIME_BCKT.createOrReplaceTempView('MAP_TIME_BCKT')



MAP_PROD_GRP=spark.sql("""Select * from compute_us_comm_dw.MAP_PROD_GRP""")
MAP_PROD_GRP.createOrReplaceTempView('MAP_PROD_GRP')

DIM_EMP_TERR_DENORM_HIV=spark.sql("""Select * from compute_us_comm_hivdw.DIM_EMP_TERR_DENORM_HIV""")
DIM_EMP_TERR_DENORM_HIV.createOrReplaceTempView('DIM_EMP_TERR_DENORM_HIV')


DIM_PROD=spark.sql("""Select * from compute_us_comm_dw.DIM_PROD""")
DIM_PROD.createOrReplaceTempView('DIM_PROD')

DIM_DT=spark.sql("""Select * from compute_us_comm_dw.DIM_DT""")
DIM_DT.createOrReplaceTempView('DIM_DT')

df=spark.sql("select * from compute_us_comm_stg.map_alig_fact_config")
df.registerTempTable("map_alig_fact_config")

MIRROR_EXCL1=''

mirror_excl=spark.sql("""select parm_val_1 from CTL_DW_PARAM_VAL where mkt_nm='HIV' AND LAYER='ALIGN_FACT' AND PARM_NM='MIRROR_EXCLUSION'""")

mirror_excl=mirror_excl.collect()

for row in mirror_excl:
    MIRROR_EXCL1=row['parm_val_1']


spark.sql("""
SELECT TERR.* FROM
(SELECT * FROM DIM_EMP_TERR WHERE PRNT_SLS_FRC_NM = 'HIV' AND EDW_ACTV_FLG = 'Y') TERR
INNER JOIN
(SELECT * FROM MAP_ALIG_FACT_CONFIG
WHERE SLS_FRC_NM = 'HIVTS' AND FROZEN_FLG = 'N' AND DATA_SRC = 'IQVIA' AND FREQUENCY = 'WEEKLY') MAFC
ON MAFC.ALIGT_PERD_QRTR = TERR.ALIGT_PERD_NM
""").registerTempTable('DIM_EMP_TERR')




Final=spark.sql("""SELECT /*+ BROADCAST (MAP_TIME_BCKT), BROADCAST (map_prod_grp)*/
UNIV.GEO_ID,
UNIV.RPT_GEO_ID,
UNIV.RPT_DISPLAY_NM,
UNIV.WEEK_ID,
UNIV.WEEK_AGG_NM,
CASE WHEN UNIV.MKT = 'HTE_IND' then UNIV.MKT else SUBSTR(UNIV.MKT,2) END AS MKT,
UNIV.SWCH_FRM_PROD_NM,
UNIV.SWCH_TO_PROD_NM,
CAST(COALESCE(MAIN.RX_CNT,0) AS DECIMAL(18,3)) AS RX_COUNT,
UNIV.RPT_GEO_SORT_ORD,
UNIV.FRM_PRD_SORT_ORD,
UNIV.TO_PRD_SORT_ORD
FROM
(
SELECT  
DISTINCT GEO_HRCHY.GEO_ID,
GEO_HRCHY.RPT_GEO_ID,
GEO_HRCHY.RPT_GEO_SK,
GEO_HRCHY.RPT_GEO_NM AS RPT_DISPLAY_NM,
MTB.WEEK_ID,
MTB.WEEK_AGG_NM,
PRD.MKT,
PRD.SWCH_FRM_PROD_NM,
PRD.SWCH_TO_PROD_NM,
GEO_HRCHY.SORT AS RPT_GEO_SORT_ORD,
PRD.FRM_PRD_SORT_ORD,
PRD.TO_PRD_SORT_ORD
FROM
(
SELECT 
DTD1.TERR_SK AS GEO_SK,HIERY.GEO_ID,CASE WHEN SUBSTR(TRIM(HIERY.GEO_ID),4,1)='1' THEN HIERY.GEO_NM||'(OTS)' ELSE HIERY.GEO_NM END AS GEO_NM ,
DTD2.TERR_SK AS RPT_GEO_SK,HIERY.RPT_GEO_ID,CASE WHEN SUBSTR(TRIM(HIERY.RPT_GEO_ID),4,1)='1' THEN HIERY.RPT_GEO_NM||'(OTS)' ELSE HIERY.RPT_GEO_NM END AS RPT_GEO_NM,DENSE_RANK() OVER (ORDER BY LENGTH(RPT_GEO_ID),RPT_GEO_ID) AS SORT
--SEL * 
FROM
(
SELECT TERR_ID AS GEO_ID,TERR_NM AS GEO_NM,TERR_ID AS RPT_GEO_ID,TERR_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=1  
UNION                                                                   
SELECT TERR_ID AS GEO_ID,TERR_NM AS GEO_NM,NATN_ID AS RPT_GEO_ID,NATN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=1  
UNION                                                                   
SELECT TERR_ID AS GEO_ID,TERR_NM AS GEO_NM,AREA_ID AS RPT_GEO_ID,AREA_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=1  
UNION                                                                   
SELECT TERR_ID AS GEO_ID,TERR_NM AS GEO_NM,REGN_ID AS RPT_GEO_ID,REGN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=1 
UNION                                                                   
SELECT REGN_ID AS GEO_ID,REGN_NM AS GEO_NM,REGN_ID AS RPT_GEO_ID,REGN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=2 
UNION                                                                   
-- SELECT REGN_ID AS GEO_ID,REGN_NM AS GEO_NM,TERR_ID AS RPT_GEO_ID,TERR_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=1  
-- QUALIFY ROW_NUMBER() OVER (PARTITION BY GEO_LVL_CD,SUBSTR(TRIM(TERR_ID),1,6) ORDER BY LENGTH(TRIM(TERR_ID)) DESC )=1 
select GEO_ID,GEO_NM,RPT_GEO_ID,RPT_GEO_NM from (SELECT REGN_ID AS GEO_ID,REGN_NM AS GEO_NM,TERR_ID AS RPT_GEO_ID,TERR_NM AS RPT_GEO_NM,ROW_NUMBER() OVER (PARTITION BY geo_lvl_cd,SUBSTR(TRIM(TERR_ID),1,6) ORDER BY LENGTH(TRIM(TERR_ID)) DESC ) as row_num FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND geo_lvl_cd=1 ) where row_num=1
UNION                                                                   
SELECT REGN_ID AS GEO_ID,REGN_NM AS GEO_NM,AREA_ID AS RPT_GEO_ID,AREA_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=2 
UNION                                                                   
SELECT REGN_ID AS GEO_ID,REGN_NM AS GEO_NM,NATN_ID AS RPT_GEO_ID,NATN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=2 
UNION                                                                   
SELECT AREA_ID AS GEO_ID,AREA_NM AS GEO_NM,REGN_ID AS RPT_GEO_ID,REGN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=2 
UNION                                                                   
SELECT AREA_ID AS GEO_ID,AREA_NM AS GEO_NM,AREA_ID AS RPT_GEO_ID,AREA_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=3 
UNION                                                                   
SELECT AREA_ID AS GEO_ID,AREA_NM AS GEO_NM,NATN_ID AS RPT_GEO_ID,NATN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=3 
UNION                                                                   
SELECT NATN_ID AS GEO_ID,NATN_NM AS GEO_NM,NATN_ID AS RPT_GEO_ID,NATN_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=4 
UNION                                                                   
SELECT NATN_ID AS GEO_ID,NATN_NM AS GEO_NM,AREA_ID AS RPT_GEO_ID,AREA_NM AS RPT_GEO_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=3 
)HIERY
INNER JOIN
(SELECT TERR_SK,GEO_ID FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' and COALESCE(UPPER(area_nm),'NULL') not like '%HIV CL%'  GROUP BY 1,2)DTD1
ON
HIERY.GEO_ID=DTD1.GEO_ID
INNER JOIN
(SELECT TERR_SK,GEO_ID FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND COALESCE(UPPER(area_nm),'NULL') not like '%HIV CL%'  GROUP BY 1,2)DTD2
ON
HIERY.RPT_GEO_ID=DTD2.GEO_ID
WHERE HIERY.RPT_GEO_ID NOT LIKE '1D%' AND UPPER(HIERY.RPT_GEO_NM) NOT LIKE 'UNASSIG%' AND HIERY.GEO_ID NOT LIKE '1D%' AND UPPER(HIERY.GEO_NM) NOT LIKE 'UNASSIG%' 
and HIERY.geo_id not like '1E%'
)GEO_HRCHY
CROSS JOIN 
(--- added new filters
SELECT distinct FRM_PRD.PROD_DISP_NM AS SWCH_FRM_PROD_NM,TO_PRD.PROD_DISP_NM AS SWCH_TO_PROD_NM,FRM_PRD.PROD_ID AS MKT,FRM_PRD_SORT_ORD,TO_PRD_SORT_ORD FROM
(
SELECT DISTINCT A.PROD_ID AS PROD_SK,PROD_DISP_NM,PROD_GRP_CD as PROD_ID,CAST(TRIM(SORT_ORD) AS INTEGER) AS FRM_PRD_SORT_ORD FROM  MAP_PROD_GRP A 
--DIM_PROD B 
WHERE 
--A.PROD_GRP_SK=B.PROD_SK AND 
A.APPL_NM='AGG_HIV_GEO_PROD_SOB_V' AND A.EXCL_FLG IN (1,2)
UNION
SELECT DISTINCT 9999,'NAIVE',PROD_GRP_cd as PROD_ID,0 AS SORT_ORD FROM  MAP_PROD_GRP A
--,DIM_PROD_V B 
WHERE
--A.PROD_GRP_SK=B.PROD_SK AND
A.APPL_NM='AGG_HIV_GEO_PROD_SOB_V' AND A.EXCL_FLG IN (1,2)
)FRM_PRD
INNER JOIN
(SELECT DISTINCT A.PROD_ID AS PROD_SK,PROD_DISP_NM,PROD_GRP_CD AS PROD_ID,CAST(TRIM(SORT_ORD) AS INTEGER) AS TO_PRD_SORT_ORD FROM  MAP_PROD_GRP A
--,DIM_PROD_V B WHERE A.PROD_GRP_SK=B.PROD_SK AND 
WHERE A.APPL_NM='AGG_HIV_GEO_PROD_SOB_V' AND A.EXCL_FLG IN (3,4) )TO_PRD
ON FRM_PRD.PROD_ID=TO_PRD.PROD_ID
and FRM_PRD.PROD_SK <> TO_PRD.PROD_SK
)PRD
CROSS JOIN
(
SELECT B.CAL_WK_ID_YYYYWW AS WEEK_ID,CASE WHEN RCNY BETWEEN 0 AND 3 THEN 'R4_R13' ELSE 'R13' END AS WEEK_AGG_NM FROM MAP_TIME_BCKT A,DIM_DT B WHERE B.cal_dt=A.time_perd_end_dt 
--AND A.MKT_SK=(SELECT MKT_SK FROM EDW.DIM_MKT_V WHERE MKT_NM='HIV')
AND MKT_NM='HIV'
AND A.SRC='SALES' AND A.BCKT_CD='WEEKLY'
--A.TIME_BCKT_MTH_WK='W' 
AND A.RCNY BETWEEN 0 AND 12
) MTB 
)UNIV
LEFT OUTER JOIN
(
SELECT 
HIERY.PRNT_SK,
HIERY.PRNT_ID,
INR.WEEK_ID,
INR.WEEK_AGG_NM,
INR.MKT,
SWCH_FRM_PROD_NM,
SWCH_TO_PROD_NM,
SUM(RX_CNT) AS RX_CNT
FROM
(
SELECT 
FCT.TERR_ID,
DT.CAL_WK_ID_YYYYWW AS WEEK_ID,
CASE WHEN MTB.RCNY BETWEEN 0 AND 3 THEN 'R4_R13' ELSE 'R13' END AS WEEK_AGG_NM,
DP.PROD_ID AS MKT,
MPG1.PROD_DISP_NM AS SWCH_FRM_PROD_NM,
MPG2.PROD_DISP_NM AS SWCH_TO_PROD_NM,
SUM(RX) AS RX_CNT
FROM 
(
SELECT * FROM FACT_ALIG_NBRX_SOB_HIV_WK WHERE ALIGT_TYPE='DYNAMIC'
AND sls_EXCL_FLG <> 'Y'
)FCT
INNER JOIN 
(SELECT PROD_SK,PROD_ID,PROD_GRP_CD,PROD_DISP_CD,PROD_DISP_NM,EXCL_FLG FROM  MAP_PROD_GRP WHERE APPL_NM='AGG_HIV_GEO_PROD_SOB_V' AND EXCL_FLG IN (1,2) ) MPG1 --CHOOSING FROM PRODUCTS
ON  MPG1.PROD_ID=FCT.FROM_brd_cd
AND CASE WHEN MPG1.EXCL_FLG=1 THEN 'HIV_TA' WHEN MPG1.EXCL_FLG=2 THEN 'HIV_NRTI' END =FCT.MKT_TYPE  -- FOR RGMN AND 3AGNT MARKET
INNER JOIN (SELECT PROD_SK,PROD_id,PROD_GRP_CD,PROD_DISP_CD,PROD_DISP_NM,EXCL_FLG FROM  MAP_PROD_GRP WHERE APPL_NM='AGG_HIV_GEO_PROD_SOB_V' AND EXCL_FLG IN (3,4) ) MPG2 --CHOOSING TO PRODUCT
ON  MPG2.PROD_ID=FCT.TO_brd_cd
AND CASE WHEN MPG2.EXCL_FLG=3 THEN 'HIV_TA' WHEN MPG2.EXCL_FLG=4 THEN 'HIV_NRTI' END =FCT.MKT_TYPE -- FOR RGMN AND 3AGNT MARKET
INNER JOIN DIM_PROD DP  --JOIN TO FETCH MKT NAME
ON 
MPG2.PROD_GRP_CD=DP.PROD_ID
INNER JOIN   --13 WEEKS DATA RESTRICTION
(SELECT * FROM MAP_TIME_BCKT WHERE MKT_NM='HIV' AND SRC='SALES' AND BCKT_CD='WEEKLY' AND RCNY BETWEEN 0 AND 12) MTB 
ON
FCT.SLS_DT BETWEEN MTB.time_perd_strt_dt AND MTB.time_perd_end_dt
--FCT.SLS_DT_NK BETWEEN MTB.STRT_TIME_SK AND MTB.END_TIME_SK
INNER JOIN   --JOIN TO FETCH WEEK ID
(SELECT DT_SK,cal_dt,CAL_WK_ID_YYYYWW FROM DIM_DT )DT
ON DT.cal_dt=MTB.time_perd_end_dt
GROUP BY 1,2,3,4,5,6 
)INR
INNER JOIN  -- QUERY FOR GEOGRAPHY LEVEL ROLLUP
(
SELECT A.GEO_SK,TD.TERR_SK AS PRNT_SK,TD.GEO_ID AS PRNT_ID, A.GEO_ID,
TRIM(SUBSTR(TERR.TERR_NM,INSTR(TERR.TERR_NM,'-')+1))AS GEO_NM,TERR.GEO_LVL_CD AS GEO_LVL,
--A.PRNT_ID,
TRIM(SUBSTR(TER.TERR_NM,INSTR(TER.TERR_NM,'-')+1)) AS PRNT_NM,TER.GEO_LVL_CD AS PRNT_LVL FROM (
SELECT TERR_SK AS GEO_SK,GEO_ID,TERR_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND GEO_LVL_CD=1 
UNION ALL
SELECT TERR_SK AS GEO_SK,GEO_ID,AREA_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 AND GEO_ID NOT LIKE '{}' AND SUBSTR(GEO_ID,4,1) <> '1' 
UNION ALL
SELECT TERR_SK AS GEO_SK,GEO_ID,REGN_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 AND GEO_ID NOT LIKE '{}' AND SUBSTR(GEO_ID,4,1) <> '1' 
UNION ALL
SELECT TERR_SK AS GEO_SK,GEO_ID,NATN_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 AND GEO_ID NOT LIKE '{}' AND SUBSTR(GEO_ID,4,1) <> '1' ) A
INNER JOIN
(SELECT * FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT')TD
ON 
A.PRNT_ID=TD.GEO_ID
AND A.ALIGT_BCKT=TD.ALIGT_BCKT
INNER JOIN
DIM_EMP_TERR TERR
ON 
TERR.geo_id=A.GEO_id
INNER JOIN
DIM_EMP_TERR TER
ON
TER.geo_id=TD.geo_id
WHERE UPPER(TERR.TERR_NM) NOT LIKE '%UNASS%'
)HIERY
ON
INR.TERR_ID=HIERY.GEO_ID
GROUP BY 1,2,3,4,5,6,7
UNION   ---- UNION FOR NAIVE AS SWITCH FROM PRODUCT FROM CORE FEED
SELECT 
HIERY.PRNT_SK AS TERR_SK,
HIERY.PRNT_ID AS TERR_ID,
INR.WEEK_ID,
INR.WEEK_AGG_NM,
INR.MKT,
SWCH_FRM_PROD_NM,
SWCH_TO_PROD_NM,
SUM(RX_CNT) AS RX_CNT
FROM
(
SELECT 
FCT.TERR_ID,
DT.CAL_WK_ID_YYYYWW AS WEEK_ID,
CASE WHEN MTB.RCNY BETWEEN 0 AND 3 THEN 'R4_R13' ELSE 'R13' END AS WEEK_AGG_NM,
DP.PROD_ID AS MKT,
'NAIVE' AS SWCH_FRM_PROD_NM,
MPG2.PROD_DISP_NM AS SWCH_TO_PROD_NM,
SUM(NEW_THPY_STRT_PRESN) AS RX_CNT
FROM 
(
SELECT * FROM FACT_ALIG_NBRX_CORE_HIV_WK WHERE ALIGT_TYPE='DYNAMIC'
-- AND (sls_dt,ALIGT_TYPE,MKT_TYPE) IN (SELECT DISTINCT  MAX(sls_dt),ALIGT_TYPE,MKT_TYPE FROM FACT_ALIG_NBRX_CORE_HIV_WK A WHERE --MKT_NM='HIV' AND
-- A.ALIGT_TYPE='DYNAMIC' GROUP BY  A.ALIGT_TYPE,A.MKT_TYPE)
AND SLS_EXCL_FLG <> 'Y'
)FCT
INNER JOIN (SELECT PROD_SK,prod_id,PROD_GRP_cd,PROD_DISP_CD,PROD_DISP_NM,EXCL_FLG FROM  MAP_PROD_GRP WHERE APPL_NM='AGG_HIV_GEO_PROD_SOB_V' AND EXCL_FLG IN (3,4) ) MPG2 --CHOOSING TO PRODUCT
ON  MPG2.PROD_id=FCT.brd_cd
AND CASE WHEN MPG2.EXCL_FLG=3 THEN 'HIV_TA' WHEN MPG2.EXCL_FLG=4 THEN 'HIV_NRTI' END =FCT.MKT_TYPE -- FOR RGMN AND 3AGNT MARKET
INNER JOIN DIM_PROD DP  --JOIN TO FETCH MKT NAME
ON 
MPG2.PROD_GRP_cd=DP.PROD_id
INNER JOIN   --13 WEEKS DATA RESTRICTION
(SELECT * FROM MAP_TIME_BCKT WHERE MKT_NM='HIV' AND SRC='SALES' AND bckt_cd='WEEKLY' AND RCNY BETWEEN 0 AND 12) MTB 
ON 
FCT.SLS_DT BETWEEN MTB.time_perd_strt_dt AND MTB.time_perd_end_dt
--FCT.SLS_DT_NK BETWEEN MTB.STRT_TIME_SK AND MTB.END_TIME_SK
INNER JOIN   --JOIN TO FETCH WEEK ID
(SELECT DT_SK,cal_dt,CAL_WK_ID_YYYYWW FROM DIM_DT )DT
ON DT.cal_dt=MTB.time_perd_end_dt
GROUP BY 1,2,3,4,5,6 
)INR
INNER JOIN  -- QUERY FOR GEOGRAPHY LEVEL ROLLUP
(
SELECT A.GEO_SK,TD.TERR_SK AS PRNT_SK,TD.GEO_ID AS PRNT_ID,A.GEO_ID,
TRIM(SUBSTR(TERR.TERR_NM,INSTR(TERR.TERR_NM,'-')+1))AS GEO_NM,TERR.GEO_LVL_CD AS GEO_LVL,
--A.PRNT_ID,
TRIM(SUBSTR(TER.TERR_NM,INSTR(TER.TERR_NM,'-')+1)) AS PRNT_NM,TER.GEO_LVL_CD AS PRNT_LVL FROM (
SELECT TERR_SK AS GEO_SK,GEO_ID,TERR_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 
UNION ALL
SELECT TERR_SK AS GEO_SK,GEO_ID,AREA_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 AND GEO_ID NOT LIKE '{}' AND SUBSTR(GEO_ID,4,1) <> '1' 
UNION ALL
SELECT TERR_SK AS GEO_SK,GEO_ID,REGN_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 AND GEO_ID NOT LIKE '{}' AND SUBSTR(GEO_ID,4,1) <> '1' 
UNION ALL
SELECT TERR_SK AS GEO_SK,GEO_ID,NATN_ID AS PRNT_ID,ALIGT_BCKT,SLS_FRC_NM FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT' AND  GEO_LVL_CD=1 AND GEO_ID NOT LIKE '{}' AND SUBSTR(GEO_ID,4,1) <> '1' ) A
INNER JOIN
(SELECT * FROM DIM_EMP_TERR_DENORM_HIV WHERE ALIGT_BCKT='CURRENT')TD
ON 
A.PRNT_ID=TD.GEO_ID
AND A.ALIGT_BCKT=TD.ALIGT_BCKT
INNER JOIN
DIM_EMP_TERR TERR
ON 
TERR.geo_id=A.GEO_id
INNER JOIN
DIM_EMP_TERR TER
ON
TER.GEO_ID=TD.GEO_ID
WHERE upper(TERR.TERR_NM) NOT LIKE '%UNASS%'
)HIERY
ON
INR.TERR_ID=HIERY.GEO_ID
GROUP BY 1,2,3,4,5,6,7
)MAIN
ON
UNIV.RPT_GEO_ID=MAIN.PRNT_ID
AND UNIV.WEEK_ID=MAIN.WEEK_ID
AND UNIV.WEEK_AGG_NM=MAIN.WEEK_AGG_NM
AND UNIV.MKT=MAIN.MKT
AND UNIV.SWCH_FRM_PROD_NM=MAIN.SWCH_FRM_PROD_NM
AND UNIV.SWCH_TO_PROD_NM=MAIN.SWCH_TO_PROD_NM""".format(MIRROR_EXCL1,MIRROR_EXCL1,MIRROR_EXCL1,MIRROR_EXCL1,MIRROR_EXCL1,MIRROR_EXCL1))




Final.registerTempTable('Final')

compute_query="""insert overwrite table compute_us_comm_hivrpt.AGG_HIV_GEO_PROD_SOB_V PARTITION(pt_data_dt='$$data_dt',pt_cycle_id='$$cycle_id')
SELECT * FROM Final"""
spark.sql(compute_query)

CommonUtils().copy_hdfs_to_s3("compute_us_comm_hivrpt.AGG_HIV_GEO_PROD_SOB_V")